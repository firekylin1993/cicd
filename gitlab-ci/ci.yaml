# 依赖的环境变量

# SONAR_TOKEN 继承全局
# SONAR_HOST_URL 继承全局
# CI_PRIVATE_TOKEN 继承全局
# K8S_NAMESPACE 项目定制化
# HARBOR 项目定制化

before_script:
    - wget https://code.avlyun.org/devops/cicd/-/raw/master/fabfilev3.py -O _ci/fabfilev3.py

stages:
    - gitcheck
    - prescan
    - sonar
    - build
    - tag
    - deploy

compile:
    stage: build
    tags:
        - j
    script:
        - docker build --build-arg VERSION_TAG=$CI_COMMIT_TAG --build-arg COMMIT_ID=$CI_COMMIT_SHORT_SHA -f _ci/Dockerfile -t $HARBOR:$CI_COMMIT_SHORT_SHA .
        - docker push $HARBOR:$CI_COMMIT_SHORT_SHA
    only:
        - tags
        - web
tag:
    stage: tag
    tags:
        - j
    script:
        - docker pull $HARBOR:$CI_COMMIT_SHORT_SHA
        - docker tag $HARBOR:$CI_COMMIT_SHORT_SHA $HARBOR:$CI_COMMIT_TAG
        - docker push $HARBOR:$CI_COMMIT_TAG
    after_script:
        - docker rmi $HARBOR:$CI_COMMIT_SHORT_SHA
        - docker rmi $HARBOR:$CI_COMMIT_TAG
    only:
        - tags

deploy_tag:
    stage: deploy
    tags:
        - j-deploy
    variables:
        CONTAINER_IMAGE: $HARBOR:$CI_COMMIT_TAG
        replace_project_name: $CI_PROJECT_NAME
        replace_deploy_time: 111
        replace_tag: $CI_COMMIT_TAG
        replace_harbor: $HARBOR
    script:
        - envsubst < _ci/template.yaml > deploy.yaml
        - kubectl apply -f deploy.yaml --namespace $K8S_NAMESPACE
    artifacts:
        paths:
            - deploy.yaml
    only:
        - tags

deploy_web:
    stage: deploy
    tags:
        - j-deploy
    variables:
        CONTAINER_IMAGE: $HARBOR:$CI_COMMIT_SHORT_SHA
        replace_project_name: $CI_PROJECT_NAME
        replace_deploy_time: 111
        # 运气差如果是全数字的，就报错了
        replace_tag: $CI_COMMIT_SHORT_SHA
        replace_harbor: $HARBOR
    script:
        - envsubst < _ci/template.yaml > deploy.yaml
        - kubectl apply -f deploy.yaml --namespace $K8S_NAMESPACE
    artifacts:
        paths:
            - deploy.yaml
    only:
        - web

unit-test:
    stage: prescan
    tags:
        - j
    script:
        - sh _ci/unittest.sh
    artifacts:
        reports:
            cobertura:
                - _ci/coverage.xml
            junit:
                - _ci/ut_report.xml
        paths:
            - _ci/coverage.out
        expire_in: 1 day
    only:
        - merge_requests
        - web

code-lint:
    stage: prescan
    tags:
        - j
    script:
        - docker run --rm -v "$CI_PROJECT_DIR:/usr/src" -w /usr/src golangci/golangci-lint:latest golangci-lint run --out-format=checkstyle --issues-exit-code=0 > _ci/report.xml
    artifacts:
        paths:
            - _ci/report.xml
        expire_in: 1 day
    only:
        - merge_requests
        - web

sonarqube:
    stage: sonar
    dependencies:
        - code-lint
        - unit-test
    tags:
        - j
    script:
        - docker run --rm -v "$CI_PROJECT_DIR:/usr/src" sonarsource/sonar-scanner-cli:latest sonar-scanner -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.projectVersion=$CI_COMMIT_REF_NAME -Dsonar.projectKey=$CI_PROJECT_NAME -Dsonar.projectName="$CI_PROJECT_TITLE" -Dsonar.qualitygate.wait=true 2>&1 | tee .sonar.tmp || echo "quality gate failed"
        - /usr/bin/python3 _ci/fabfilev3.py sonar_report
    only:
        - merge_requests

# 检查代码是否从 master 拉出来的，不然不予合并，检查失败发送通知
forkMaster:
    stage: gitcheck
    tags:
        - j
    script:
        - /usr/bin/python3 _ci/fabfilev3.py is_branch_base_master
    only:
        - merge_requests
