pipeline {
  agent any
  environment {
    isAutoTrigger = sh (returnStdout: true, script: 'if [[ "$gitlabBranch" = "" ]]; then echo FALSE; else echo TRUE; fi').trim()
    cur_branch = sh (returnStdout: true, script: 'if [[ "$gitlabBranch" = "" ]]; then echo ${input_branch}; else echo $gitlabBranch; fi').trim()
  }
  options {
    skipDefaultCheckout true
  }
  stages {
    stage ('开始任务钩子'){
      steps {
        sh "env"
        sh "wget https://code.avlyun.org/devops/cicd/raw/master/fabfile.py -O _ci/fabfile.py"
        sh "fab -f _ci/fabfile jobstart"
      }
    }
    stage ('获取分支'){
      steps {
        echo "获取分支：${cur_branch}"
        checkout([$class: 'GitSCM', branches: [[name: "${cur_branch}"]], doGenerateSubmoduleConfigurations: false, userRemoteConfigs: [[credentialsId: '68c9a6a1-9bd3-4cc7-bc24-f9d17142da8d', url: "${git_repo}"]]])
      }
    }
    stage ('获取CI脚本'){
      steps {
        sh "wget https://code.avlyun.org/devops/cicd/raw/master/fabfile.py -O _ci/fabfile.py"
      }
    }
    stage ('代码质量扫描'){
      when {
        allOf {
          environment name: 'gitlabMergeRequestState', value: 'opened'
        }
      }
      steps {
        /* golang 代码质量扫描 */
        sh returnStatus: true, script: "docker run --rm -v `pwd`:/app -w /app golangci/golangci-lint:v1.22.2 golangci-lint run --out-format=checkstyle --issues-exit-code=0 > report.xml"
        /* golang 代码测试覆盖率扫描 */
        // sh returnStatus: true, script: "docker run --rm -v `pwd`:/app -w /app -e GOPROXY=https://goproxy.io,direct -e GOPRIVATE=code.avlyun.org golang:1.13.7 go test -timeout=1800s -coverprofile='coverage.out' ./..."
        /* sonarqube 扫描 */
        sh returnStatus: true, script: "fab -f _ci/fabfile localsonarscanner"
      }
    }
    stage ('构建'){
      when {
        not {
          environment name: 'gitlabMergeRequestState', value: 'opened'
        }
      }
      steps {
        /* 辅助信息 */
        sh "pwd"
        sh "ls -l"
        /* golang 单测 */
        // sh "docker run --rm -v `pwd`:/app -w /app -e GOPROXY=https://goproxy.io,direct -e GOPRIVATE=code.avlyun.org golang:1.13.7 go test -timeout=1800s ./..."
        /* 开始构建 */
        sh "fab -f _ci/fabfile all"
      }
    }
    stage ('打包yaml文件'){
      when {
        not {
          environment name: 'gitlabMergeRequestState', value: 'opened'
        }
      }
      steps {
        archiveArtifacts 'deploy.yaml'
      }
    }
    stage ('是否是master分支'){
      when {
        allOf {
          environment name: 'cur_branch', value: 'master'
        }
      }
      steps {
        echo "是Master分支"
      }
    }
	}
  post {
    aborted {
      sh "fab -f _ci/fabfile jobstop:status=aborted"
    }
    failure {
      sh "fab -f _ci/fabfile jobstop:status=failure"
    }
    success {
      sh "fab -f _ci/fabfile jobstop:status=success"
    }
    unstable {
      sh "fab -f _ci/fabfile jobstop:status=unstable"
    }
  }
}
